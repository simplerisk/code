{"version":3,"file":"gridstack-engine-spec.js","sourceRoot":"","sources":["../../spec/gridstack-engine-spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { GridStackEngine } from'../src/gridstack-engine';\nimport { GridStackNode } from'../src/types';\n\ndescribe('gridstack engine:', () => {\n 'use strict';\n  let e: GridStackEngine;\n  let ePriv: any; // cast engine for private vars access\n  let findNode = function(id: string) {\n    return e.nodes.find(n => n.id === id);\n  };\n\n  it('should exist setup function.', () => {\n    expect(GridStackEngine).not.toBeNull();\n    expect(typeof GridStackEngine).toBe('function');\n  });\n\n  describe('test constructor >', () => {\n  \n    it('should be setup properly', () => {\n      ePriv = e = new GridStackEngine();\n      expect(e.column).toEqual(12);\n      expect(e.float).toEqual(false);\n      expect(e.maxRow).toEqual(undefined!);\n      expect(e.nodes).toEqual([]);\n      expect(e.batchMode).toEqual(undefined!);\n      expect(ePriv.onChange).toEqual(undefined);\n    });\n\n    it('should set params correctly.', () => {\n      let fkt = () => { };\n      let arr: any = [1,2,3];\n      ePriv = e = new GridStackEngine({column: 1, onChange:fkt, float:true, maxRow:2, nodes:arr});\n      expect(e.column).toEqual(1);\n      expect(e.float).toBe(true);\n      expect(e.maxRow).toEqual(2);\n      expect(e.nodes).toEqual(arr);\n      expect(e.batchMode).toEqual(undefined);\n      expect(ePriv.onChange).toEqual(fkt);\n    });\n  });\n\n  describe('batch update', () => {\n\n    it('should set float and batchMode when calling batchUpdate.', () => {\n      ePriv = e = new GridStackEngine({float: true});\n      e.batchUpdate();\n      expect(e.float).toBe(true);\n      expect(e.batchMode).toBe(true);\n    });\n  });  \n\n  describe('test prepareNode >', () => {\n\n    beforeAll(() => {\n      ePriv = e = new GridStackEngine();\n    });\n    it('should prepare a node', () => {\n      expect(e.prepareNode({}, false)).toEqual(expect.objectContaining({x: 0, y: 0, h: 1}));\n      expect(e.prepareNode({x: 10}, false)).toEqual(expect.objectContaining({x: 10, y: 0, h: 1}));\n      expect(e.prepareNode({x: -10}, false)).toEqual(expect.objectContaining({x: 0, y: 0, h: 1}));\n      expect(e.prepareNode({y: 10}, false)).toEqual(expect.objectContaining({x: 0, y: 10, h: 1}));\n      expect(e.prepareNode({y: -10}, false)).toEqual(expect.objectContaining({x: 0, y: 0, h: 1}));\n      expect(e.prepareNode({w: 3}, false)).toEqual(expect.objectContaining({x: 0, y: 0, w: 3, h: 1}));\n      expect(e.prepareNode({w: 100}, false)).toEqual(expect.objectContaining({x: 0, y: 0, w: 12, h: 1}));\n      expect(e.prepareNode({w: 0}, false)).toEqual(expect.objectContaining({x: 0, y: 0, h: 1}));\n      expect(e.prepareNode({w: -190}, false)).toEqual(expect.objectContaining({x: 0, y: 0, h: 1}));\n      expect(e.prepareNode({h: 3}, false)).toEqual(expect.objectContaining({x: 0, y: 0, h: 3}));\n      expect(e.prepareNode({h: 0}, false)).toEqual(expect.objectContaining({x: 0, y: 0, h: 1}));\n      expect(e.prepareNode({h: -10}, false)).toEqual(expect.objectContaining({x: 0, y: 0, h: 1}));\n      expect(e.prepareNode({x: 4, w: 10}, false)).toEqual(expect.objectContaining({x: 2, y: 0, w: 10, h: 1}));\n      expect(e.prepareNode({x: 4, w: 10}, true)).toEqual(expect.objectContaining({x: 4, y: 0, w: 8, h: 1}));\n    });\n  });\n\n  describe('sorting of nodes >', () => {\n    beforeAll(() => {\n      ePriv = e = new GridStackEngine();\n      e.nodes = [{x: 7, y: 0}, {x: 4, y: 4}, {x: 9, y: 0}, {x: 0, y: 1}];\n    });\n\n    it('should sort ascending with 12 columns.', () => {\n      e.sortNodes(1);\n      expect(e.nodes).toEqual([{x: 7, y: 0}, {x: 9, y: 0}, {x: 0, y: 1}, {x: 4, y: 4}]);\n    });\n  \n    it('should sort descending with 12 columns.', () => {\n      e.sortNodes(-1);\n      expect(e.nodes).toEqual([{x: 4, y: 4}, {x: 0, y: 1}, {x: 9, y: 0}, {x: 7, y: 0}]);\n    });\n  \n    it('should sort ascending without columns.', () => {\n      ePriv.column = undefined;\n      e.sortNodes(1);\n      expect(e.nodes).toEqual([{x: 7, y: 0}, {x: 9, y: 0}, {x: 0, y: 1}, {x: 4, y: 4}]);\n    });\n  \n    it('should sort descending without columns.', () => {\n      ePriv.column = undefined;\n      e.sortNodes(-1);\n      expect(e.nodes).toEqual([{x: 4, y: 4}, {x: 0, y: 1}, {x: 9, y: 0}, {x: 7, y: 0}]);\n    });\n  \n  });\n  \n  describe('test isAreaEmpty >', () => {\n\n    beforeAll(() => {\n      ePriv = e = new GridStackEngine({float:true});\n      e.nodes = [\n        e.prepareNode({x: 3, y: 2, w: 3, h: 2})\n      ];\n    });\n\n    it('should be true', () => {\n      expect(e.isAreaEmpty(0, 0, 3, 2)).toEqual(true);\n      expect(e.isAreaEmpty(3, 4, 3, 2)).toEqual(true);\n    });\n\n    it('should be false', () => {\n      expect(e.isAreaEmpty(1, 1, 3, 2)).toEqual(false);\n      expect(e.isAreaEmpty(2, 3, 3, 2)).toEqual(false);\n    });\n  });\n\n  describe('test cleanNodes/getDirtyNodes >', () => {\n\n    beforeAll(() => {\n      ePriv = e = new GridStackEngine({float:true});\n      e.nodes = [\n        e.prepareNode({x: 0, y: 0, id: '1', _dirty: true}),\n        e.prepareNode({x: 3, y: 2, w: 3, h: 2, id: '2', _dirty: true}),\n        e.prepareNode({x: 3, y: 7, w: 3, h: 2, id: '3'})\n      ];\n    });\n\n    beforeEach(() => {\n      delete ePriv.batchMode;\n    });\n\n    it('should return all dirty nodes', () => {\n      let nodes = e.getDirtyNodes();\n      expect(nodes.length).toEqual(2);\n      expect(nodes[0].id).toEqual('1');\n      expect(nodes[1].id).toEqual('2');\n    });\n\n    it('should\\'n clean nodes if batchMode true', () => {\n      e.batchMode = true;\n      e.cleanNodes();\n      expect(e.getDirtyNodes().length).toBeGreaterThan(0);\n    });\n\n    it('should clean all dirty nodes', () => {\n      e.cleanNodes();\n      expect(e.getDirtyNodes().length).toEqual(0);\n    });\n  });\n\n  describe('test batchUpdate/commit >', () => {\n    beforeAll(() => {\n      ePriv = e = new GridStackEngine();\n    });\n\n    it('should work on not float grids', () => {\n      expect(e.float).toEqual(false);\n      e.batchUpdate();\n      e.batchUpdate(); // double for code coverage\n      expect(e.batchMode).toBe(true);\n      expect(e.float).toEqual(true);\n      e.batchUpdate(false);\n      e.batchUpdate(false);\n      expect(e.batchMode).not.toBe(true);\n      expect(e.float).not.toBe(true);\n    });\n\n    it('should work on float grids', () => {\n      e.float = true;\n      e.batchUpdate();\n      expect(e.batchMode).toBe(true);\n      expect(e.float).toEqual(true);\n      e.batchUpdate(false);\n      expect(e.batchMode).not.toBe(true);\n      expect(e.float).toEqual(true);\n    });\n  });\n\n  describe('test batchUpdate/commit >', () => {\n\n    beforeAll(() => {\n      ePriv = e = new GridStackEngine({float:true});\n    });\n\n    it('should work on float grids', () => {\n      expect(e.float).toEqual(true);\n      e.batchUpdate();\n      expect(e.batchMode).toBe(true);\n      expect(e.float).toEqual(true);\n      e.batchUpdate(false);\n      expect(e.batchMode).not.toBe(true);\n      expect(e.float).toEqual(true);\n    });\n  });\n\n  describe('test _notify >', () => {\n    let spy;\n\n    beforeEach(() => {\n      spy = {\n        callback: () => {}\n      };\n      vi.spyOn(spy,'callback');\n      ePriv = e = new GridStackEngine({float:true, onChange: spy.callback});\n      e.nodes = [\n        e.prepareNode({x: 0, y: 0, id: '1', _dirty: true}),\n        e.prepareNode({x: 3, y: 2, w: 3, h: 2, id: '2', _dirty: true}),\n        e.prepareNode({x: 3, y: 7, w: 3, h: 2, id: '3'})\n      ];\n    });\n\n    it('should\\'n be called if batchMode true', () => {\n      e.batchMode = true;\n      ePriv._notify();\n      expect(spy.callback).not.toHaveBeenCalled();\n    });\n\n    it('should by called with dirty nodes', () => {\n      ePriv._notify();\n      expect(spy.callback).toHaveBeenCalledWith([e.nodes[0], e.nodes[1]]);\n    });\n\n    it('should by called with extra passed node to be removed', () => {\n      let n1 = {id: -1};\n      ePriv._notify([n1]);\n      expect(spy.callback).toHaveBeenCalledWith([n1, e.nodes[0], e.nodes[1]]);\n    });\n  });\n\n  describe('test _packNodes >', () => {\n    describe('using float:false mode >', () => {\n      beforeEach(() => {\n        ePriv = e = new GridStackEngine({float:false});\n      });\n\n      it('shouldn\\'t pack one node with y coord eq 0', () => {\n        e.nodes = [\n          e.prepareNode({x: 0, y: 0, w:1, h:1, id: '1'}),\n        ];\n        ePriv._packNodes();\n        expect(findNode('1')).toEqual(expect.objectContaining({x: 0, y: 0, h: 1}));\n        expect(findNode('1')!._dirty).toBeFalsy();\n      });\n\n      it('should pack one node correctly', () => {\n        e.nodes = [\n          e.prepareNode({x: 0, y: 1, w:1, h:1, id: '1'}),\n        ];\n        ePriv._packNodes();\n        expect(findNode('1')).toEqual(expect.objectContaining({x: 0, y: 0, _dirty: true}));\n      });\n\n      it('should pack nodes correctly', () => {\n        e.nodes = [\n          e.prepareNode({x: 0, y: 1, w:1, h:1, id: '1'}),\n          e.prepareNode({x: 0, y: 5, w:1, h:1, id: '2'}),\n        ];\n        ePriv._packNodes();\n        expect(findNode('1')).toEqual(expect.objectContaining({x: 0, y: 0, _dirty: true}));\n        expect(findNode('2')).toEqual(expect.objectContaining({x: 0, y: 1, _dirty: true}));\n      });\n  \n      it('should pack reverse nodes correctly', () => {\n        e.nodes = [\n          e.prepareNode({x: 0, y: 5, w:1, h:1, id: '1'}),\n          e.prepareNode({x: 0, y: 1, w:1, h:1, id: '2'}),\n        ];\n        ePriv._packNodes();\n        expect(findNode('2')).toEqual(expect.objectContaining({x: 0, y: 0, _dirty: true}));\n        expect(findNode('1')).toEqual(expect.objectContaining({x: 0, y: 1, _dirty: true}));\n      });\n  \n      it('should respect locked nodes', () => {\n        e.nodes = [\n          e.prepareNode({x: 0, y: 1, w:1, h:1, id: '1', locked: true}),\n          e.prepareNode({x: 0, y: 5, w:1, h:1, id: '2'}),\n        ];\n        ePriv._packNodes();\n        expect(findNode('1')).toEqual(expect.objectContaining({x: 0, y: 1, h: 1}));\n        expect(findNode('1')!._dirty).toBeFalsy();\n        expect(findNode('2')).toEqual(expect.objectContaining({x: 0, y: 2, _dirty: true}));\n      });\n    });\n  });\n\n  describe('test changedPos >', () => {\n    beforeAll(() => {\n      ePriv = e = new GridStackEngine();\n    });\n    it('should return true for changed x', () => {\n      let widget = { x: 1, y: 2, w: 3, h: 4 };\n      expect(e.changedPosConstrain(widget, {x:2, y:2})).toEqual(true);\n    });\n    it('should return true for changed y', () => {\n      let widget = { x: 1, y: 2, w: 3, h: 4 };\n      expect(e.changedPosConstrain(widget, {x:1, y:1})).toEqual(true);\n    });\n    it('should return true for changed width', () => {\n      let widget = { x: 1, y: 2, w: 3, h: 4 };\n      expect(e.changedPosConstrain(widget, {x:2, y:2, w:4, h:4})).toEqual(true);\n    });\n    it('should return true for changed height', () => {\n      let widget = { x: 1, y: 2, w: 3, h: 4 };\n      expect(e.changedPosConstrain(widget, {x:1, y:2, w:3, h:3})).toEqual(true);\n    });\n    it('should return false for unchanged position', () => {\n      let widget = { x: 1, y: 2, w: 3, h: 4 };\n      expect(e.changedPosConstrain(widget, {x:1, y:2, w:3, h:4})).toEqual(false);\n    });\n  });\n\n  describe('test locked widget >', () => {\n    beforeAll(() => {\n      ePriv = e = new GridStackEngine();\n    });\n    it('should add widgets around locked one', () => {\n      let nodes: GridStackNode[] = [\n        {x: 0, y: 1, w: 12, h: 1, locked: true, noMove: true, noResize: true, id: '0'},\n        {x: 1, y: 0, w: 2, h: 3, id: '1'}\n      ];\n      // add locked item\n      e.addNode(nodes[0])\n      expect(findNode('0')).toEqual(expect.objectContaining({x: 0, y: 1, w: 12, h: 1, locked: true}));\n      // add item that moves past locked one\n      e.addNode(nodes[1])\n      expect(findNode('0')).toEqual(expect.objectContaining({x: 0, y: 1, w: 12, h: 1, locked: true}));\n      expect(findNode('1')).toEqual(expect.objectContaining({x: 1, y: 2, h: 3}));\n      // locked item can still be moved directly (what user does)\n      let node0 = findNode('0');\n      expect(e.moveNode(node0!, {y:6})).toEqual(true);\n      expect(findNode('0')).toEqual(expect.objectContaining({x: 0, y: 6, h: 1, locked: true}));\n      // but moves regular one past it\n      let node1 = findNode('1');\n      expect(e.moveNode(node1!, {x:6, y:6})).toEqual(true);\n      expect(node1).toEqual(expect.objectContaining({x: 6, y: 7, w: 2, h: 3}));\n      // but moves regular one before (gravity ON)\n      e.float = false;\n      expect(e.moveNode(node1!, {x:7, y:3})).toEqual(true);\n      expect(node1).toEqual(expect.objectContaining({x: 7, y: 0, w: 2, h: 3}));\n      // but moves regular one before (gravity OFF)\n      e.float = true;\n      expect(e.moveNode(node1!, {x:7, y:3})).toEqual(true);\n      expect(node1).toEqual(expect.objectContaining({x: 7, y: 3, w: 2, h: 3}));\n    });\n  });\n  \n  describe('test columnChanged >', () => {\n    beforeAll(() => {\n    });\n    it('12 to 1 and back', () => {\n      ePriv = e = new GridStackEngine({ column: 12 });\n      // Add two side-by-side components 6+6 = 12 columns\n      const left = e.addNode({ x: 0, y: 0, w: 6, h: 1, id: 'left' });\n      const right = e.addNode({ x: 6, y: 0, w: 6, h: 1, id: 'right' });\n      expect(left).toEqual(expect.objectContaining({x: 0, y: 0, w: 6, h: 1}));\n      expect(right).toEqual(expect.objectContaining({x: 6, y: 0, w: 6, h: 1}));\n      // Resize to 1 column\n      e.column = 1;\n      e.columnChanged(12, 1);\n      expect(left).toEqual(expect.objectContaining({x: 0, y: 0, w: 1, h: 1}));\n      expect(right).toEqual(expect.objectContaining({x: 0, y: 1, w: 1, h: 1}));\n      // Resize back to 12 column\n      e.column = 12;\n      e.columnChanged(1, 12);\n      expect(left).toEqual(expect.objectContaining({x: 0, y: 0, w: 6, h: 1}));\n      expect(right).toEqual(expect.objectContaining({x: 6, y: 0, w: 6, h: 1}));\n    });\n    it('24 column to 1 and back', () => {\n      ePriv = e = new GridStackEngine({ column: 24 });\n      // Add two side-by-side components 12+12 = 24 columns\n      const left = e.addNode({ x: 0, y: 0, w: 12, h: 1, id: 'left' });\n      const right = e.addNode({ x: 12, y: 0, w: 12, h: 1, id: 'right' });\n      expect(left).toEqual(expect.objectContaining({x: 0, y: 0, w: 12, h: 1}));\n      expect(right).toEqual(expect.objectContaining({x: 12, y: 0, w: 12, h: 1}));\n      // Resize to 1 column\n      e.column = 1;\n      e.columnChanged(24, 1);\n      expect(left).toEqual(expect.objectContaining({x: 0, y: 0, w: 1, h: 1}));\n      expect(right).toEqual(expect.objectContaining({x: 0, y: 1, w: 1, h: 1}));\n      // Resize back to 24 column\n      e.column = 24;\n      e.columnChanged(1, 24);\n      expect(left).toEqual(expect.objectContaining({x: 0, y: 0, w: 12, h: 1}));\n      expect(right).toEqual(expect.objectContaining({x: 12, y: 0, w: 12, h: 1}));\n    });\n  });\n\n  describe('test compact >', () => {\n    beforeAll(() => {\n      ePriv = e = new GridStackEngine();\n    });\n    it('do nothing', () => {\n      e.compact();\n    });\n  });\n\n});\n"]}